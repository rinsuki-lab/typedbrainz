// THIS FILE IS CONVERTED FROM Flow to TypeScript by TypedBrainz.
import type { $ReadOnlyArray, $ReadOnly, $ReadOnlyMap, $Exact, $Keys, $Values, $_$Spread } from "../../../../../../src/type-utils.js";
import * as Sentry from "@sentry/browser";
import * as React from "react";
"WIP convertAST: ClassDeclaration";
export const NO_MATCH_VALUE: NO_MATCH = "WIP convertExpression: NewExpression";
"Unknown Type: ExpressionStatement";
"WIP convertAST: FunctionDeclaration";
export type VarArgsObject<T> = {};
"WIP convertAST: InterfaceDeclaration";
"Unknown Type: VariableDeclaration";
"WIP convertAST: ClassDeclaration";
export type Parser<T, V> = "WIP convertTypeNode: FunctionTypeAnnotation";
"Unknown Type: VariableDeclaration";
"Unknown Type: TypeAlias";
export const state: State = "WIP convertExpression: CallExpression";
"WIP convertAST: FunctionDeclaration";
"Unknown Type: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
"Unknown Type: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
export const createTextContentParser = "WIP convertExpression: ArrowFunctionExpression";
"Unknown Type: VariableDeclaration";
export const createVarSubstParser = "WIP convertExpression: ArrowFunctionExpression";
export const parseStringVarSubst: Parser<string | NO_MATCH, "WIP convertTypeNode: MixedTypeAnnotation"> = "WIP convertExpression: CallExpression";
"Unknown Type: VariableDeclaration";
"Unknown Type: VariableDeclaration";
export const substEnd: RegExp = "WIP convertLiteral: Literal";
export const createCondSubstParser = "WIP convertExpression: ArrowFunctionExpression";
export default "WIP convertExpression: FunctionDeclaration";
