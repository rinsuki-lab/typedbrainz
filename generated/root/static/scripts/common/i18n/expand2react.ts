// THIS FILE IS CONVERTED FROM Flow to TypeScript by TypedBrainz.
import type { $ReadOnlyArray, $ReadOnly, $ReadOnlyMap, $Exact, $Keys, $Values, $_$Spread } from "../../../../../../src/type-utils.js";
import he from "he";
import * as React from "react";
import { l as lActual, ln as lnActual, lp as lpActual } from "../i18n.js";
import { l_admin as lAdminActual, ln_admin as lnAdminActual } from "./admin.js";
import expand, { NO_MATCH as NO_MATCH, Parser as Parser, VarArgsClass as VarArgsClass, VarArgsObject as VarArgsObject, accept as accept, createCondSubstParser as createCondSubstParser, createTextContentParser as createTextContentParser, createVarSubstParser as createVarSubstParser, error as error, gotMatch as gotMatch, mapVarSubstArg as mapVarSubstArg, NO_MATCH_VALUE as NO_MATCH_VALUE, parseContinuous as parseContinuous, parseContinuousString as parseContinuousString, parseStringVarSubst as parseStringVarSubst, saveMatch as saveMatch, state as state, substEnd as substEnd, VarArgs as VarArgs } from "./expand2.js";
import { l_statistics as lStatisticsActual, ln_statistics as lnStatisticsActual, lp_statistics as lpStatisticsActual } from "./statistics.js";
"WIP convertAST: TypeAlias";
"WIP convertAST: TypeAlias";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: FunctionDeclaration";
export const hooks: {
    reactTextContentHook: "WIP convertTypeNode: FunctionTypeAnnotation" | null;
} = "WIP convertExpression: ObjectExpression";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: TypeAlias";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: TypeAlias";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: FunctionDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
"WIP convertAST: VariableDeclaration";
export default "WIP convertExpression: FunctionDeclaration";
"WIP convertAST_ExportNamedDeclaration: FunctionDeclaration";
export const l = "WIP convertExpression: ArrowFunctionExpression";
export const l_admin = "WIP convertExpression: ArrowFunctionExpression";
export const l_statistics = "WIP convertExpression: ArrowFunctionExpression";
export const ln = "WIP convertExpression: ArrowFunctionExpression";
export const ln_admin = "WIP convertExpression: ArrowFunctionExpression";
export const ln_statistics = "WIP convertExpression: ArrowFunctionExpression";
export const lp = "WIP convertExpression: ArrowFunctionExpression";
export const lp_statistics = "WIP convertExpression: ArrowFunctionExpression";
