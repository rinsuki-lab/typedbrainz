// THIS FILE IS CONVERTED FROM Flow to TypeScript by TypedBrainz.
import type { $ReadOnlyArray, $ReadOnly, $ReadOnlyMap, $Exact, $Keys, $Values, $_$Spread } from "../../../../../../src/type-utils.js";
import commaList, { commaListText as commaListText } from "../../common/i18n/commaList.js";
import { VarArgsClass as VarArgsClass, VarArgsObject as VarArgsObject } from "../../common/i18n/expand2.js";
import { expand2reactWithVarArgsInstance as expand2reactWithVarArgsInstance } from "../../common/i18n/expand2react.js";
import { expand2textWithVarArgsClass as expand2textWithVarArgsClass } from "../../common/i18n/expand2text.js";
import linkedEntities from "../../common/linkedEntities.mjs";
import clean from "../../common/utility/clean.js";
import { compareStrings as compareStrings } from "../../common/utility/compare.mjs";
import displayLinkAttribute, { displayLinkAttributeText as displayLinkAttributeText } from "../../common/utility/displayLinkAttribute.js";
"Unknown Type: VariableDeclaration";
"Unknown Type: VariableDeclaration";
"Unknown Type: VariableDeclaration";
"Unknown Type: TypeAlias";
"Unknown Type: TypeAlias";
export type LinkPhraseProp = "link_phrase" | "long_link_phrase" | "reverse_link_phrase";
"Unknown Type: ClassDeclaration";
export type LinkPhraseI18n<T> = {
    commaList: "WIP convertTypeNode: FunctionTypeAnnotation";
    defaultValue: T;
    displayLinkAttribute: "WIP convertTypeNode: FunctionTypeAnnotation";
    expand: "WIP convertTypeNode: FunctionTypeAnnotation";
};
"Unknown Type: VariableDeclaration";
"Unknown Type: VariableDeclaration";
"Unknown Type: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
"Unknown Type: VariableDeclaration";
"Unknown Type: FunctionDeclaration";
"WIP convertAST: FunctionDeclaration";
export const getPhraseAndExtraAttributesText = "WIP convertExpression: ArrowFunctionExpression";
export const interpolate = "WIP convertExpression: ArrowFunctionExpression";
export const interpolateText = "WIP convertExpression: ArrowFunctionExpression";
export const getExtraAttributes = "WIP convertExpression: ArrowFunctionExpression";
export const stripAttributes = "WIP convertExpression: ArrowFunctionExpression";
