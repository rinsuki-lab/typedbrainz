// Generated by dts-bundle-generator v9.5.1

import * as tree from './weight-balanced-tree.js';

export type $ReadOnlyArray<T> = readonly T[];
export type $ReadOnly<T> = Readonly<T>;
export type $ReadOnlyMap<K, V> = ReadonlyMap<K, V>;
export type $Exact<T> = T;
export type $_$Spread<T1, T2> = T2 & Omit<T1, keyof T2>;
export type AnnotatedEntityT = AreaT | ArtistT | EventT | GenreT | InstrumentT | LabelT | PlaceT | RecordingT | ReleaseGroupT | ReleaseT | SeriesT | WorkT;
export type AnnotationRoleT = {
	latest_annotation?: AnnotationT;
};
export type AnnotationT = {
	changelog: string;
	creation_date: string;
	editor: EditorT | null;
	html: string;
	id: number;
	parent: AnnotatedEntityT | null;
	text: string | null;
};
export type AreaT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"area">, $_$Spread<DatePeriodRoleT, $_$Spread<TypeRoleT<AreaTypeT>, {
	containment: $ReadOnlyArray<AreaT> | null;
	country_code: string;
	iso_3166_1_codes: $ReadOnlyArray<string>;
	iso_3166_2_codes: $ReadOnlyArray<string>;
	iso_3166_3_codes: $ReadOnlyArray<string>;
	primary_code: string;
	primaryAlias?: string | null;
}>>>>>>;
export type AreaTypeT = OptionTreeT<"area_type">;
export type ArtistT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"artist">, $_$Spread<DatePeriodRoleT, $_$Spread<IpiCodesRoleT, $_$Spread<IsniCodesRoleT, $_$Spread<RatableRoleT, $_$Spread<ReviewableRoleT, $_$Spread<TypeRoleT<ArtistTypeT>, {
	area: AreaT | null;
	begin_area: AreaT | null;
	begin_area_id: number | null;
	end_area: AreaT | null;
	end_area_id: number | null;
	gender: GenderT | null;
	gender_id: number | null;
	primaryAlias?: string | null;
	sort_name: string;
}>>>>>>>>>>;
export type ArtistTypeT = OptionTreeT<"artist_type">;
export type GenderT = OptionTreeT<"gender">;
export type ArtistCreditNameT = {
	artist: ArtistT;
	joinPhrase: string;
	name: string;
};
export type ArtistCreditRoleT = {
	artist: string;
	artistCredit: ArtistCreditT;
};
export type ArtistCreditT = {
	editsPending?: boolean;
	entityType?: "artist_credit";
	id?: number;
	names: $ReadOnlyArray<ArtistCreditNameT>;
};
export type ArtworkRoleT = $ReadOnly<$_$Spread<PendingEditsRoleT, {
	comment: string;
	event?: EventT;
	filename: string | null;
	huge_ia_thumbnail: string;
	huge_thumbnail: string;
	id: number;
	image: string | null;
	large_ia_thumbnail: string;
	large_thumbnail: string;
	mime_type: string;
	small_ia_thumbnail: string;
	small_thumbnail: string;
	suffix: string;
	types: $ReadOnlyArray<string>;
}>>;
export type ReleaseArtT = $ReadOnly<$_$Spread<ArtworkRoleT, {
	release?: ReleaseT;
}>>;
export type IpiCodesRoleT = {
	ipi_codes: $ReadOnlyArray<IpiCodeT>;
};
export type IpiCodeT = $_$Spread<PendingEditsRoleT, {
	ipi: string;
}>;
export type IsniCodesRoleT = {
	isni_codes: $ReadOnlyArray<IsniCodeT>;
};
export type IsniCodeT = $_$Spread<PendingEditsRoleT, {
	isni: string;
}>;
export type IsrcT = $_$Spread<EntityRoleT<"isrc">, $_$Spread<PendingEditsRoleT, {
	isrc: string;
	recording_id: number;
}>>;
export type IswcT = $_$Spread<EntityRoleT<"iswc">, $_$Spread<PendingEditsRoleT, {
	iswc: string;
	work_id: number;
}>>;
export type ReviewableRoleT = {
	review_count?: number;
};
export type EDIT_RELEASEGROUP_CREATE_T = 20;
export type EDIT_RELEASEGROUP_EDIT_T = 21;
export type EDIT_RELEASE_CREATE_T = 31;
export type EDIT_RELEASE_EDIT_T = 32;
export type EDIT_RELEASE_ADDRELEASELABEL_T = 34;
export type EDIT_RELEASE_ADD_ANNOTATION_T = 35;
export type EDIT_RELEASE_DELETERELEASELABEL_T = 36;
export type EDIT_RELEASE_EDITRELEASELABEL_T = 37;
export type EDIT_RELEASE_REORDER_MEDIUMS_T = 313;
export type EDIT_WORK_CREATE_T = 41;
export type EDIT_MEDIUM_CREATE_T = 51;
export type EDIT_MEDIUM_EDIT_T = 52;
export type EDIT_MEDIUM_DELETE_T = 53;
export type EDIT_MEDIUM_ADD_DISCID_T = 55;
export type EDIT_RECORDING_EDIT_T = 72;
export type EDIT_RELATIONSHIP_CREATE_T = 90;
export type EDIT_RELATIONSHIP_EDIT_T = 91;
export type EDIT_RELATIONSHIP_DELETE_T = 92;
export type EDIT_RELATIONSHIPS_REORDER_T = 99;
export type EditorT = $_$Spread<EntityRoleT<"editor">, {
	avatar: string;
	deleted: boolean;
	name: string;
	privileges: number;
}>;
export type AppearancesT<T> = {
	hits: number;
	results: $ReadOnlyArray<T>;
};
export type CommentRoleT = {
	comment: string;
};
export type RelatableEntityRoleT<T> = $_$Spread<EntityRoleT<T>, $_$Spread<LastUpdateRoleT, $_$Spread<PendingEditsRoleT, {
	gid: string;
	name: string;
	paged_relationship_groups?: {};
	relationships?: $ReadOnlyArray<RelationshipT>;
}>>>;
export type DatePeriodRoleT = {
	begin_date: PartialDateT | null;
	end_date: PartialDateT | null;
	ended: boolean;
};
export type PendingEditsRoleT = {
	editsPending: boolean;
};
export type EntityRoleT<T> = {
	entityType: T;
	id: number;
};
export type LastUpdateRoleT = {
	last_updated: string | null;
};
export type PartialDateT = {
	day?: number | null | undefined;
	month?: number | null | undefined;
	year?: number | null | undefined;
};
export type NonUrlRelatableEntityT = AreaT | ArtistT | EventT | GenreT | InstrumentT | LabelT | PlaceT | RecordingT | ReleaseGroupT | ReleaseT | SeriesT | WorkT;
export type RelatableEntityT = NonUrlRelatableEntityT | UrlT;
export type NonUrlRelatableEntityTypeT = NonUrlRelatableEntityT["entityType"];
export type RelatableEntityTypeT = NonUrlRelatableEntityTypeT | "url";
export type TypeRoleT<T> = {
	typeID: number | null;
	typeName?: string;
};
export type EventT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"event">, $_$Spread<DatePeriodRoleT, $_$Spread<RatableRoleT, $_$Spread<ReviewableRoleT, $_$Spread<TypeRoleT<EventTypeT>, {
	areas: $ReadOnlyArray<{
		credit: string;
		entity: AreaT;
	}>;
	cancelled: boolean;
	event_art_presence: "absent" | "present" | "darkened" | null;
	may_have_event_art?: boolean;
	performers: $ReadOnlyArray<{
		credit: string;
		entity: ArtistT;
		roles: $ReadOnlyArray<string>;
	}>;
	places: $ReadOnlyArray<{
		credit: string;
		entity: PlaceT;
	}>;
	primaryAlias?: string | null;
	related_entities?: {
		areas: AppearancesT<string>;
		performers: AppearancesT<string>;
		places: AppearancesT<string>;
	};
	related_series: $ReadOnlyArray<number>;
	setlist?: string;
	time: string;
}>>>>>>>>;
export type EventTypeT = OptionTreeT<"event_type">;
export type CompoundFieldT<F> = {
	errors: $ReadOnlyArray<string>;
	field: F;
	has_errors: boolean;
	html_name: string;
	id: number;
	pendingErrors?: $ReadOnlyArray<string>;
	type: "compound_field";
};
export type DatePeriodFieldT = CompoundFieldT<{
	begin_date: PartialDateFieldT;
	end_date: PartialDateFieldT;
	ended: FieldT<boolean>;
}>;
export type FieldT<V> = {
	errors: $ReadOnlyArray<string>;
	has_errors: boolean;
	html_name: string;
	id: number;
	pendingErrors?: $ReadOnlyArray<string>;
	type: "field";
	value: V;
};
export type FormT<F, N extends string = ""> = {
	field: F;
	has_errors: boolean;
	name: N;
	type: "form";
};
export type OptionTreeT<T> = $_$Spread<EntityRoleT<T>, {
	child_order: number;
	description: string;
	gid: string;
	name: string;
	parent_id: number | null;
}>;
export type PartialDateFieldT = CompoundFieldT<{
	day: FieldT<StrOrNum | null>;
	month: FieldT<StrOrNum | null>;
	year: FieldT<StrOrNum | null>;
}>;
export type GenreT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"genre">, {
	primaryAlias?: string | null;
}>>>>;
export type N_l_T = "WIP convertTypeNode: FunctionTypeAnnotation";
export type InstrumentT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"instrument">, $_$Spread<TypeRoleT<InstrumentTypeT>, {
	description: string;
	primaryAlias?: string | null;
}>>>>>;
export type InstrumentTypeT = OptionTreeT<"instrument_type">;
export type LabelT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"label">, $_$Spread<DatePeriodRoleT, $_$Spread<IpiCodesRoleT, $_$Spread<IsniCodesRoleT, $_$Spread<RatableRoleT, $_$Spread<ReviewableRoleT, $_$Spread<TypeRoleT<LabelTypeT>, {
	area: AreaT | null;
	label_code: number;
	primaryAlias?: string | null;
}>>>>>>>>>>;
export type LabelTypeT = OptionTreeT<"label_type">;
export type LanguageT = {
	entityType: "language";
	frequency: 0 | 1 | 2;
	id: number;
	iso_code_1: string | null;
	iso_code_2b: string | null;
	iso_code_2t: string | null;
	iso_code_3: string | null;
	name: string;
};
export type ScriptT = {
	entityType: "script";
	frequency: 1 | 2 | 3 | 4;
	id: number;
	iso_code: string;
	iso_number: string | null;
	name: string;
};
export type MediumFormatT = $_$Spread<OptionTreeT<"medium_format">, {
	has_discids: boolean;
	year: number | null | undefined;
}>;
export type MediumT = $ReadOnly<$_$Spread<EntityRoleT<"medium">, $_$Spread<LastUpdateRoleT, {
	cdtoc_track_count: number | null;
	cdtoc_track_lengths?: $ReadOnlyArray<number | null>;
	cdtoc_tracks?: $ReadOnlyArray<TrackT>;
	cdtocs: $ReadOnlyArray<string>;
	data_track_lengths?: $ReadOnlyArray<number | null>;
	editsPending: boolean;
	format: MediumFormatT | null;
	format_id: number | null;
	gid: string;
	may_have_discids: boolean;
	name: string;
	position: number;
	pregap_length?: $ReadOnlyArray<number | null>;
	release_id: number;
	track_count: number | null;
	tracks?: $ReadOnlyArray<TrackT>;
	tracks_pager?: PagerT;
}>>>;
export type MediumWithRecordingsT = $ReadOnly<$_$Spread<MediumT, {
	tracks?: $ReadOnlyArray<TrackWithRecordingT>;
}>>;
export type PagerT = {
	current_page: number;
	entries_per_page: number;
	first_page: 1;
	last_page: number;
	next_page: number | null;
	previous_page: number | null;
	total_entries: number;
};
export type StrOrNum = string | number;
export type CoordinatesT = {
	latitude: number;
	longitude: number;
};
export type PlaceT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"place">, $_$Spread<DatePeriodRoleT, $_$Spread<RatableRoleT, $_$Spread<ReviewableRoleT, $_$Spread<TypeRoleT<PlaceTypeT>, {
	address: string;
	area: AreaT | null;
	coordinates: CoordinatesT | null;
	primaryAlias?: string | null;
}>>>>>>>>;
export type PlaceTypeT = OptionTreeT<"place_type">;
export type RatableRoleT = {
	rating?: number;
	rating_count?: number;
	user_rating?: number;
};
export type RecordingT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"recording">, $_$Spread<RatableRoleT, $_$Spread<ReviewableRoleT, {
	appearsOn?: AppearancesT<{
		gid: string;
		name: string;
	}>;
	artist?: string;
	artistCredit?: ArtistCreditT;
	first_release_date?: PartialDateT;
	isrcs: $ReadOnlyArray<IsrcT>;
	length: number;
	primaryAlias?: string | null;
	related_works: $ReadOnlyArray<number>;
	video: boolean;
}>>>>>>;
export type LinkAttrT = {
	credited_as?: string;
	text_value?: string;
	type: {
		gid: string;
	} | LinkAttrTypeT;
	typeID: number;
	typeName: string;
};
export type LinkAttrTypeT = $_$Spread<OptionTreeT<"link_attribute_type">, {
	children?: $ReadOnlyArray<LinkAttrTypeT>;
	creditable: boolean;
	free_text: boolean;
	instrument_aliases?: $ReadOnlyArray<string>;
	instrument_comment?: string;
	instrument_type_id?: number;
	instrument_type_name?: string;
	l_description?: string;
	l_name?: string;
	level?: number;
	root_gid: string;
	root_id: number;
}>;
export type LinkTypeT = $_$Spread<OptionTreeT<"link_type">, {
	attributes: {};
	cardinality0: number;
	cardinality1: number;
	children?: $ReadOnlyArray<LinkTypeT>;
	deprecated: boolean;
	documentation: string | null;
	examples: $ReadOnlyArray<{
		name: string;
		relationship: RelationshipT;
	}> | null;
	has_dates: boolean;
	id: number;
	l_description?: string;
	l_link_phrase?: string;
	l_name?: string;
	l_reverse_link_phrase?: string;
	link_phrase: string;
	long_link_phrase: string;
	orderable_direction: number;
	reverse_link_phrase: string;
	root_id: number | null;
	type0: RelatableEntityTypeT;
	type1: RelatableEntityTypeT;
}>;
export type RelationshipT = $ReadOnly<$_$Spread<DatePeriodRoleT, $_$Spread<PendingEditsRoleT, {
	attributes: $ReadOnlyArray<LinkAttrT>;
	backward: boolean;
	entity0?: RelatableEntityT | null | undefined;
	entity0_credit: string;
	entity0_id: number;
	entity1?: RelatableEntityT | null | undefined;
	entity1_credit: string;
	entity1_id: number;
	id: number;
	linkOrder: number;
	linkTypeID: number;
	source_id: number | null;
	source_type: RelatableEntityTypeT;
	target: RelatableEntityT;
	target_type: RelatableEntityTypeT;
	verbosePhrase: string;
}>>>;
export type QualityT = -1 | 0 | 1 | 2;
export type ReleaseEventT = {
	country: AreaT | null;
	date: PartialDateT | null;
};
export type ReleaseLabelT = {
	catalogNumber: string | null;
	label: LabelT | null;
	label_id: number | null;
};
export type ReleaseStatusT = OptionTreeT<"release_status">;
export type ReleaseT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<ArtistCreditRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"release">, {
	barcode: string | null;
	combined_format_name?: string;
	combined_track_count?: string;
	cover_art_presence: "absent" | "present" | "darkened" | null;
	events?: $ReadOnlyArray<ReleaseEventT>;
	has_no_tracks: boolean;
	labels?: $ReadOnlyArray<ReleaseLabelT>;
	language: LanguageT | null;
	languageID: number | null;
	length?: number;
	may_have_cover_art?: boolean;
	may_have_discids?: boolean;
	mediums?: $ReadOnlyArray<MediumT>;
	packagingID: number | null;
	primaryAlias?: string | null;
	quality: QualityT;
	releaseGroup?: ReleaseGroupT;
	script: ScriptT | null;
	scriptID: number | null;
	status: ReleaseStatusT | null;
	statusID: number | null;
}>>>>>;
export type ReleaseWithMediumsT = $ReadOnly<$_$Spread<ReleaseT, {
	mediums: $ReadOnlyArray<MediumWithRecordingsT>;
}>>;
export type ReleaseGroupT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<ArtistCreditRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"release_group">, $_$Spread<RatableRoleT, $_$Spread<ReviewableRoleT, $_$Spread<TypeRoleT<ReleaseGroupTypeT>, {
	cover_art?: ReleaseArtT;
	firstReleaseDate: string | null;
	hasCoverArt: boolean;
	l_type_name: string | null;
	primaryAlias?: string | null;
	release_count: number;
	release_group?: ReleaseGroupT;
	secondaryTypeIDs: $ReadOnlyArray<number>;
	typeID: number | null;
	typeName: string | null;
}>>>>>>>>;
export type ReleaseGroupTypeT = $_$Spread<OptionTreeT<"release_group_type">, {
	historic: false;
}>;
export type SeriesEntityTypeT = "artist" | "event" | "recording" | "release" | "release_group" | "work";
export type SeriesT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"series">, $_$Spread<TypeRoleT<SeriesTypeT>, {
	entity_count?: number;
	orderingTypeID: number;
	primaryAlias?: string | null;
	type?: SeriesTypeT;
}>>>>>;
export type SeriesTypeT = $ReadOnly<$_$Spread<OptionTreeT<"series_type">, {
	item_entity_type: SeriesEntityTypeT;
}>>;
export type TrackT = $ReadOnly<$_$Spread<EntityRoleT<"track">, $_$Spread<LastUpdateRoleT, {
	artist: string;
	artistCredit: ArtistCreditT;
	editsPending: boolean;
	gid: string;
	isDataTrack: boolean;
	length: number;
	medium: MediumT | null;
	medium_id: number | null;
	name: string;
	number: string;
	position: number;
	recording?: RecordingT;
}>>>;
export type TrackWithRecordingT = $ReadOnly<$_$Spread<TrackT, {
	recording: RecordingT;
}>>;
export type UrlT = $_$Spread<RelatableEntityRoleT<"url">, {
	decoded: string;
	href_url: string;
	pretty_name: string;
	show_in_external_links?: boolean;
	show_license_in_sidebar?: boolean;
	sidebar_name?: string;
}>;
export type WorkT = $ReadOnly<$_$Spread<AnnotationRoleT, $_$Spread<CommentRoleT, $_$Spread<RelatableEntityRoleT<"work">, $_$Spread<RatableRoleT, $_$Spread<ReviewableRoleT, $_$Spread<TypeRoleT<WorkTypeT>, {
	_fromBatchCreateWorksDialog?: boolean;
	artists: $ReadOnlyArray<ArtistCreditT>;
	attributes: $ReadOnlyArray<WorkAttributeT>;
	authors: $ReadOnlyArray<{
		credit: string;
		entity: ArtistT;
		roles: $ReadOnlyArray<string>;
	}>;
	iswcs: $ReadOnlyArray<IswcT>;
	languages: $ReadOnlyArray<WorkLanguageT>;
	other_artists: $ReadOnlyArray<{
		credit: string;
		entity: ArtistT;
		roles: $ReadOnlyArray<string>;
	}>;
	primaryAlias?: string | null;
	related_artists?: {
		artists: AppearancesT<string>;
		authors: AppearancesT<string>;
	};
}>>>>>>>;
export type WorkTypeT = OptionTreeT<"work_type">;
export type WorkLanguageT = {
	language: LanguageT;
};
export type WorkAttributeT = {
	id: number | null;
	typeID: number;
	typeName: string;
	value: string;
	value_id: number | null;
};
export type WsJsRelationshipEntityT = {
	entityType: NonUrlRelatableEntityTypeT;
	gid: string;
	name: string;
} | {
	entityType: "url";
	gid?: string;
	name: string;
};
export type WsJsRelationshipAttributeT = {
	credited_as?: string;
	removed?: boolean;
	text_value?: string;
	type: {
		gid: string;
	};
};
export type WsJsRelationshipCommonT = {
	attributes: $ReadOnlyArray<WsJsRelationshipAttributeT>;
	begin_date?: PartialDateT;
	end_date?: PartialDateT;
	ended?: boolean;
	entities: [
		WsJsRelationshipEntityT,
		WsJsRelationshipEntityT
	];
	entity0_credit: string;
	entity1_credit: string;
};
export type WsJsEditRelationshipCreateT = $ReadOnly<$_$Spread<WsJsRelationshipCommonT, {
	edit_type: EDIT_RELATIONSHIP_CREATE_T;
	linkOrder?: number;
	linkTypeID: number;
}>>;
export type WsJsEditRelationshipEditT = $ReadOnly<$_$Spread<Partial<WsJsRelationshipCommonT>, {
	edit_type: EDIT_RELATIONSHIP_EDIT_T;
	id: number;
	linkTypeID: number;
}>>;
export type WsJsEditRelationshipDeleteT = $ReadOnly<{
	edit_type: EDIT_RELATIONSHIP_DELETE_T;
	id: number;
	linkTypeID: number;
}>;
export type WsJsEditRelationshipT = WsJsEditRelationshipCreateT | WsJsEditRelationshipEditT | WsJsEditRelationshipDeleteT | WsJsEditRelationshipsReorderT;
export type WsJsEditRelationshipsReorderT = {
	edit_type: EDIT_RELATIONSHIPS_REORDER_T;
	linkTypeID: number;
	relationship_order: $ReadOnlyArray<{
		link_order: number;
		relationship_id: number;
	}>;
};
export type WsJsEditWorkCreateT = {
	comment: string;
	edit_type: EDIT_WORK_CREATE_T;
	languages: $ReadOnlyArray<number>;
	name: string;
	type_id: number | null;
};
export type WS_EDIT_RESPONSE_OK_T = 1;
export type WS_EDIT_RESPONSE_NO_CHANGES_T = 2;
export type WsJsEditResponseT = {
	edits: $ReadOnlyArray<{
		edit_type: EDIT_RELATIONSHIP_CREATE_T;
		relationship_id: number | null;
		response: WS_EDIT_RESPONSE_OK_T;
	} | {
		edit_type: EDIT_RELEASE_CREATE_T;
		entity: ReleaseT;
		response: WS_EDIT_RESPONSE_OK_T;
	} | {
		edit_type: EDIT_RELEASEGROUP_CREATE_T;
		entity: ReleaseGroupT;
		response: WS_EDIT_RESPONSE_OK_T;
	} | {
		edit_type: EDIT_MEDIUM_CREATE_T;
		entity: {
			id: number;
			position: number;
		};
		response: WS_EDIT_RESPONSE_OK_T;
	} | {
		edit_type: EDIT_WORK_CREATE_T;
		entity: WorkT;
		response: WS_EDIT_RESPONSE_OK_T;
	} | {
		edit_type: EDIT_RELEASE_ADDRELEASELABEL_T;
		entity: {
			catalogNumber: string | null;
			id: number;
			labelID: number | null;
		};
		response: WS_EDIT_RESPONSE_OK_T;
	} | {
		edit_type: EDIT_MEDIUM_ADD_DISCID_T | EDIT_MEDIUM_DELETE_T | EDIT_MEDIUM_EDIT_T | EDIT_RECORDING_EDIT_T | EDIT_RELATIONSHIP_DELETE_T | EDIT_RELATIONSHIP_EDIT_T | EDIT_RELATIONSHIPS_REORDER_T | EDIT_RELEASE_ADD_ANNOTATION_T | EDIT_RELEASE_DELETERELEASELABEL_T | EDIT_RELEASE_EDIT_T | EDIT_RELEASE_EDITRELEASELABEL_T | EDIT_RELEASE_REORDER_MEDIUMS_T | EDIT_RELEASEGROUP_EDIT_T;
		response: WS_EDIT_RESPONSE_OK_T;
	} | {
		response: WS_EDIT_RESPONSE_NO_CHANGES_T;
	}>;
};
export type SearchableTypeT = EntityItemT["entityType"];
export type StateT<T extends EntityItemT> = {
	canChangeType?: "WIP convertTypeNode: FunctionTypeAnnotation";
	containerClass?: string;
	disabled?: boolean;
	entityType: T["entityType"];
	error: number;
	highlightedIndex: number;
	htmlName?: string;
	id: string;
	indexedSearch: boolean;
	inputChangeHook?: "WIP convertTypeNode: FunctionTypeAnnotation";
	inputClass?: string;
	inputRef?: {
		current: HTMLInputElement | null;
	};
	inputValue: string;
	isAddEntityDialogOpen?: boolean;
	isInputFocused: boolean;
	isLookupPerformed?: boolean;
	isOpen: boolean;
	items: $ReadOnlyArray<ItemT<T>>;
	label?: string;
	page: number;
	pendingSearch: string | null;
	placeholder?: string;
	recentItems: $ReadOnlyArray<OptionItemT<T>> | null;
	recentItemsKey: string;
	required: boolean;
	results: $ReadOnlyArray<ItemT<T>> | null;
	selectedItem: OptionItemT<T> | null;
	showDescriptions?: boolean;
	showLabel?: boolean;
	staticItems?: $ReadOnlyArray<OptionItemT<T>>;
	statusMessage: string;
	totalPages: number | null | undefined;
	width?: string;
};
export type SearchActionT = {
	indexed?: boolean;
	searchTerm?: string;
	type: "search-after-timeout";
};
export type ActionT<T extends EntityItemT> = SearchActionT | {
	type: "change-entity-type";
	entityType: SearchableTypeT;
} | {
	type: "clear-recent-items";
} | {
	type: "highlight-index";
	index: number;
} | {
	type: "highlight-next-item";
} | {
	type: "highlight-previous-item";
} | {
	type: "reset-menu";
} | {
	type: "select-item";
	item: ItemT<T>;
} | {
	type: "set-input-focus";
	isFocused: boolean;
} | {
	type: "set-menu-visibility";
	value: boolean;
} | {
	type: "show-ws-results";
	entities: $ReadOnlyArray<T>;
	page: number;
	totalPages: number;
} | {
	type: "show-lookup-error";
} | {
	type: "show-lookup-type-error";
} | {
	type: "show-more-results";
} | {
	type: "set-recent-items";
	items: $ReadOnlyArray<OptionItemT<T>>;
} | {
	type: "show-search-error";
} | {
	type: "stop-search";
} | {
	type: "toggle-add-entity-dialog";
	isOpen: boolean;
} | {
	type: "toggle-indexed-search";
} | {
	type: "toggle-descriptions";
	showDescriptions: boolean;
} | {
	type: "type-value";
	value: string;
};
export type ActionItemT<T extends EntityItemT> = {
	type: "action";
	action: ActionT<T>;
	id: number | string;
	name: string | "WIP convertTypeNode: FunctionTypeAnnotation";
	level?: number;
	separator?: boolean;
	disabled?: boolean;
};
export type OptionItemT<T> = {
	type: "option";
	id: number | string;
	name: string | "WIP convertTypeNode: FunctionTypeAnnotation";
	entity: T;
	level?: number;
	separator?: boolean;
	disabled?: boolean;
};
export type HeaderItemT = {
	type: "header";
	id: number | string;
	name: string | "WIP convertTypeNode: FunctionTypeAnnotation";
	disabled: true;
	separator?: boolean;
};
export type ItemT<T extends EntityItemT> = ActionItemT<T> | OptionItemT<T> | HeaderItemT;
export type EntityItemT = EditorT | LanguageT | LinkAttrTypeT | LinkTypeT | NonUrlRelatableEntityT;
export type LazyReleaseActionT = {
	medium: MediumWithRecordingsT;
	type: "toggle-medium";
} | {
	expanded: boolean;
	mediums: $ReadOnlyArray<MediumWithRecordingsT>;
	type: "toggle-all-mediums";
} | {
	medium: MediumWithRecordingsT;
	tracks: $ReadOnlyArray<TrackWithRecordingT>;
	type: "load-tracks";
};
export type LoadedTracksMapT = $ReadOnlyMap<number, $ReadOnlyArray<TrackWithRecordingT>>;
export type LazyReleaseStateT = {
	expandedMediums: $ReadOnlyMap<number, boolean>;
	loadedTracks: LoadedTracksMapT;
};
export type RelationshipEditStatusT = number & {
	__OpaqueType__RelationshipEditStatusT: never;
};
export type CreditChangeOptionT = "" | "all" | "same-entity-types" | "same-relationship-type";
export type RelationshipStateForTypesT<T0 extends RelatableEntityT, T1 extends RelatableEntityT> = {
	_lineage: $ReadOnlyArray<string>;
	_original: RelationshipStateT | null;
	_status: RelationshipEditStatusT;
	attributes: tree.ImmutableTree<LinkAttrT> | null;
	begin_date: PartialDateT | null;
	editsPending: boolean;
	end_date: PartialDateT | null;
	ended: boolean;
	entity0: T0;
	entity0_credit: string;
	entity1: T1;
	entity1_credit: string;
	id: number;
	linkOrder: number;
	linkTypeID: number | null;
};
export type RelationshipStateT = RelationshipStateForTypesT<RelatableEntityT, RelatableEntityT>;
export type RelationshipPhraseGroupT = {
	relationships: tree.ImmutableTree<RelationshipStateT> | null;
	textPhrase: string;
};
export type RelationshipLinkTypeGroupT = {
	backward: boolean;
	phraseGroups: tree.ImmutableTree<RelationshipPhraseGroupT> | null;
	typeId: number;
};
export type RelationshipLinkTypeGroupsT = tree.ImmutableTree<RelationshipLinkTypeGroupT> | null;
export type RelationshipTargetTypeGroupT = [
	RelatableEntityTypeT,
	RelationshipLinkTypeGroupsT
];
export type RelationshipTargetTypeGroupsT = tree.ImmutableTree<RelationshipTargetTypeGroupT> | null;
export type RelationshipSourceGroupT = [
	RelatableEntityT,
	RelationshipTargetTypeGroupsT
];
export type RelationshipSourceGroupsT = tree.ImmutableTree<RelationshipSourceGroupT> | null;
export type NonReleaseRelatableEntityT = AreaT | ArtistT | EventT | GenreT | InstrumentT | LabelT | PlaceT | RecordingT | ReleaseGroupT | SeriesT | UrlT | WorkT;
export type RelationshipDialogLocationT = {
	backward?: boolean | null | undefined;
	batchSelection?: boolean | null | undefined;
	linkTypeId?: number | null | undefined;
	relationshipId?: number | null | undefined;
	source: RelatableEntityT;
	targetType?: RelatableEntityTypeT | null | undefined;
	textPhrase?: string | null | undefined;
	track?: TrackWithRecordingT | null | undefined;
};
export type RelationshipEditorStateT = {
	dialogLocation: RelationshipDialogLocationT | null;
	entity: NonReleaseRelatableEntityT;
	existingRelationshipsBySource: RelationshipSourceGroupsT;
	reducerError: Error | null;
	relationshipsBySource: RelationshipSourceGroupsT;
};
export type RelationshipDialogStateT = {
	attributes: DialogAttributesStateT;
	backward: boolean;
	datePeriod: DialogDatePeriodStateT;
	isHelpVisible: boolean;
	linkOrder: number;
	linkType: DialogLinkTypeStateT;
	sourceEntity: DialogSourceEntityStateT;
	targetEntity: DialogTargetEntityStateT;
};
export type DialogBooleanAttributeStateT = $ReadOnly<$_$Spread<DialogLinkAttributeStateT, {
	control: "checkbox";
	enabled: boolean;
}>>;
export type DialogMultiselectAttributeStateT = $ReadOnly<$_$Spread<DialogLinkAttributeStateT, {
	control: "multiselect";
	linkType: LinkTypeT;
	values: $ReadOnlyArray<DialogMultiselectAttributeValueStateT>;
}>>;
export type DialogMultiselectAttributeValueStateT = {
	autocomplete: StateT<LinkAttrTypeT>;
	control: "multiselect-value";
	creditedAs?: string;
	error?: string;
	key: number;
	removed: boolean;
};
export type DialogTextAttributeStateT = $ReadOnly<$_$Spread<DialogLinkAttributeStateT, {
	control: "text";
	textValue: string;
}>>;
export type DialogAttributeT = DialogBooleanAttributeStateT | DialogMultiselectAttributeStateT | DialogTextAttributeStateT;
export type DialogAttributesT = $ReadOnlyArray<DialogAttributeT>;
export type DialogAttributesStateT = {
	attributesList: DialogAttributesT;
	resultingLinkAttributes: tree.ImmutableTree<LinkAttrT> | null;
};
export type DialogLinkAttributeStateT = {
	creditedAs?: string;
	error: string;
	key: number;
	max: number | null;
	min: number | null;
	textValue?: string;
	type: LinkAttrTypeT;
};
export type DialogDatePeriodStateT = {
	field: DatePeriodFieldT;
	result: DatePeriodRoleT;
};
export type ExternalLinkAttrT = {
	credited_as?: string;
	text_value?: string;
	type: {
		gid: string;
	};
};
export type DialogLinkTypeStateT = {
	autocomplete: StateT<LinkTypeT>;
	error: React.ReactNode;
};
export type DialogSourceEntityStateT = $ReadOnly<$_$Spread<DialogEntityCreditStateT, {
	entityType: RelatableEntityTypeT;
	error: React.ReactNode;
}>>;
export type TargetTypeOptionT = {
	text: string;
	value: RelatableEntityTypeT;
};
export type TargetTypeOptionsT = $ReadOnlyArray<TargetTypeOptionT>;
export type DialogTargetEntityStateT = $ReadOnly<$_$Spread<DialogEntityCreditStateT, {
	allowedTypes: TargetTypeOptionsT | null;
	autocomplete: StateT<NonUrlRelatableEntityT> | null;
	error: string;
	relationshipId: number;
	target: RelatableEntityT;
	targetType: RelatableEntityTypeT;
}>>;
export type DialogEntityCreditStateT = {
	creditedAs: string;
	creditsToChange: CreditChangeOptionT;
	releaseHasUnloadedTracks: boolean;
};
export type ReleaseWithMediumsAndReleaseGroupT = $ReadOnly<$_$Spread<ReleaseWithMediumsT, {
	releaseGroup: ReleaseGroupT;
}>>;
export type RecordingMediumsT = Map<number, Array<MediumWithRecordingsT>>;
export type MediumWorkStateT = {
	isSelected: boolean;
	targetTypeGroups: RelationshipTargetTypeGroupsT;
	work: WorkT;
};
export type MediumWorkStateTreeT = tree.ImmutableTree<MediumWorkStateT> | null;
export type MediumRecordingStateT = {
	isSelected: boolean;
	recording: RecordingT;
	relatedWorks: MediumWorkStateTreeT;
	targetTypeGroups: RelationshipTargetTypeGroupsT;
};
export type MediumRecordingStateTreeT = tree.ImmutableTree<MediumRecordingStateT> | null;
export type MediumStateTreeT = tree.ImmutableTree<[
	MediumWithRecordingsT,
	MediumRecordingStateTreeT
]> | null;
export type ReleaseRelationshipEditorStateT = $ReadOnly<$_$Spread<$Exact<LazyReleaseStateT>, $_$Spread<$Exact<RelationshipEditorStateT>, {
	editNoteField: FieldT<string>;
	enterEditForm: FormT<{
		make_votable: FieldT<boolean>;
	}>;
	entity: ReleaseWithMediumsAndReleaseGroupT;
	mediums: MediumStateTreeT;
	mediumsByRecordingId: RecordingMediumsT;
	selectedRecordings: tree.ImmutableTree<RecordingT> | null;
	selectedWorks: tree.ImmutableTree<WorkT> | null;
	submissionError: string | null | undefined;
	submissionInProgress: boolean;
}>>>;
type ActionT$1 = {
	type: "set-date";
	date: {
		year?: string;
		month?: string;
		day?: string;
	};
} | {
	type: "show-pending-errors";
};
type ActionT$2 = ActionT$1;
type ActionT$3 = {
	type: "update-begin-date";
	action: ActionT$2;
} | {
	type: "update-end-date";
	action: ActionT$2;
} | {
	type: "set-ended";
	enabled: boolean;
} | {
	type: "copy-date";
};
export type MultiselectActionT<V extends EntityItemT> = {
	type: "add-value";
} | {
	type: "remove-value";
	valueKey: number;
} | {
	action: ActionT<V>;
	type: "update-value-autocomplete";
	valueKey: number;
};
export type DialogEntityCreditActionT = {
	creditedAs: string;
	type: "set-credit";
} | {
	type: "set-credits-to-change";
	value: CreditChangeOptionT;
};
export type DialogLinkOrderActionT = {
	newLinkOrder: number;
	type: "update-link-order";
};
export type DialogActionT = {
	type: "change-direction";
} | {
	attributes: $ReadOnlyArray<ExternalLinkAttrT>;
	type: "set-attributes";
} | {
	type: "toggle-help";
} | {
	action: DialogEntityCreditActionT;
	type: "update-source-entity";
} | {
	action: DialogTargetEntityActionT;
	source: RelatableEntityT;
	type: "update-target-entity";
} | {
	source: RelatableEntityT;
	targetType: RelatableEntityTypeT;
	type: "update-target-type";
} | DialogLinkOrderActionT | {
	action: DialogLinkTypeActionT;
	source: RelatableEntityT;
	type: "update-link-type";
} | {
	action: DialogAttributeActionT;
	type: "update-attribute";
} | {
	action: ActionT$3;
	type: "update-date-period";
};
export type DialogAttributeActionT = {
	action: DialogBooleanAttributeActionT;
	rootKey: number;
	type: "update-boolean-attribute";
} | {
	action: DialogMultiselectAttributeActionT;
	rootKey: number;
	type: "update-multiselect-attribute";
} | {
	action: DialogTextAttributeActionT;
	rootKey: number;
	type: "update-text-attribute";
};
export type DialogBooleanAttributeActionT = {
	enabled: boolean;
	type: "toggle";
};
export type DialogLinkTypeActionT = {
	action: ActionT<LinkTypeT>;
	source: RelatableEntityT;
	type: "update-autocomplete";
};
export type DialogMultiselectAttributeActionT = MultiselectActionT<LinkAttrTypeT> | {
	creditedAs: string;
	type: "set-value-credit";
	valueKey: number;
};
export type DialogTextAttributeActionT = {
	textValue: string;
	type: "set-text-value";
};
export type UpdateRelationshipActionT = {
	batchSelectionCount: number | void;
	creditsToChangeForSource: CreditChangeOptionT;
	creditsToChangeForTarget: CreditChangeOptionT;
	newRelationshipState: RelationshipStateT;
	oldRelationshipState: RelationshipStateT | null;
	sourceEntity: RelatableEntityT;
	type: "update-relationship-state";
};
export type RelationshipEditorActionT = {
	relationship: RelationshipStateT;
	type: "remove-relationship";
} | {
	relationship: RelationshipStateT;
	source: RelatableEntityT;
	type: "move-relationship-down";
} | {
	relationship: RelationshipStateT;
	source: RelatableEntityT;
	type: "move-relationship-up";
} | {
	hasOrdering: boolean;
	linkPhraseGroup: RelationshipPhraseGroupT;
	source: RelatableEntityT;
	type: "toggle-ordering";
} | {
	location: RelationshipDialogLocationT | null;
	type: "update-dialog-location";
} | {
	changes: {};
	entityType: RelatableEntityTypeT;
	type: "update-entity";
} | UpdateRelationshipActionT;
export type UpdateTargetEntityAutocompleteActionT = {
	action: ActionT<NonUrlRelatableEntityT>;
	linkType: LinkTypeT | null | undefined;
	source: RelatableEntityT;
	type: "update-autocomplete";
};
export type DialogTargetEntityActionT = UpdateTargetEntityAutocompleteActionT | {
	action: DialogEntityCreditActionT;
	type: "update-credit";
} | {
	text: string;
	type: "update-url-text";
};
export type AcceptBatchCreateWorksDialogActionT = {
	attributes: tree.ImmutableTree<LinkAttrT> | null;
	begin_date: PartialDateT | null;
	end_date: PartialDateT | null;
	ended: boolean;
	languages: $ReadOnlyArray<LanguageT>;
	linkType: LinkTypeT;
	type: "accept-batch-create-works-dialog";
	workType: number | null;
};
export type ReleaseRelationshipEditorActionT = LazyReleaseActionT | RelationshipEditorActionT | AcceptBatchCreateWorksDialogActionT | {
	languages: $ReadOnlyArray<LanguageT>;
	name: string;
	type: "accept-edit-work-dialog";
	work: WorkT;
	workType: number | null;
} | {
	relationships: $ReadOnlyArray<RelationshipT>;
	type: "load-work-relationships";
	work: WorkT;
} | {
	recording: RecordingT;
	type: "remove-work";
	workState: MediumWorkStateT;
} | {
	isSelected: boolean;
	type: "toggle-select-all-recordings";
} | {
	isSelected: boolean;
	type: "toggle-select-all-works";
} | {
	isSelected: boolean;
	recording: RecordingT;
	type: "toggle-select-recording";
} | {
	isSelected: boolean;
	type: "toggle-select-work";
	work: WorkT;
} | {
	isSelected: boolean;
	recordingStates: MediumRecordingStateTreeT | null;
	type: "toggle-select-medium-recordings";
} | {
	isSelected: boolean;
	recordingStates: MediumRecordingStateTreeT | null;
	type: "toggle-select-medium-works";
} | {
	editNote: string;
	type: "update-edit-note";
} | {
	checked: boolean;
	type: "update-make-votable";
} | {
	type: "start-submission";
} | {
	error?: string;
	type: "stop-submission";
} | {
	edits: Array<[
		Array<RelationshipStateT>,
		WsJsEditRelationshipT
	]> | Array<[
		Array<RelationshipStateT>,
		WsJsEditWorkCreateT
	]>;
	responseData: WsJsEditResponseT;
	type: "update-submitted-relationships";
};
declare const EMPTY_PARTIAL_DATE: PartialDateT;
declare const ENTITY_NAMES: {
	area: N_l_T;
	artist: N_l_T;
	event: N_l_T;
	genre: N_l_T;
	instrument: N_l_T;
	label: N_l_T;
	place: N_l_T;
	recording: N_l_T;
	release: N_l_T;
	release_group: N_l_T;
	series: N_l_T;
	url: N_l_T;
	work: N_l_T;
};
declare const INSTRUMENT_ROOT_ID = 14;
declare const VOCAL_ROOT_ID = 3;
declare const TASK_ATTRIBUTE_ID = 1150;
declare const AREA_TYPE_COUNTRY = 1;
declare const ARTIST_TYPE_PERSON = 1;
declare const ARTIST_TYPE_GROUP = 2;
declare const ARTIST_TYPE_ORCHESTRA = 5;
declare const ARTIST_TYPE_CHOIR = 6;
declare const ARTIST_GROUP_TYPES: Set<number>;
declare const CONTACT_URL = "https://metabrainz.org/contact";
declare const DARTIST_ID = 2;
declare const DLABEL_ID = 1;
declare const FAVICON_CLASSES: {};
declare const PART_OF_SERIES_LINK_TYPES: {};
declare const PART_OF_SERIES_LINK_TYPE_GIDS: $ReadOnlyArray<string>;
declare const PART_OF_SERIES_LINK_TYPE_IDS: $ReadOnlyArray<number>;
declare const PROBABLY_CLASSICAL_LINK_TYPES = "WIP convertExpression: ArrayExpression";
declare const RECORDING_OF_LINK_TYPE_ID: number;
declare const RECORDING_OF_LINK_TYPE_GID: string;
declare const RT_MIRROR = 2;
declare const TIME_ATTRIBUTE = "ebd303c3-7f57-452a-aa3b-d780ebad868d";
declare const SERIES_ORDERING_ATTRIBUTE = "a59c5830-5ec7-38fe-9a21-c7ea54f6650a";
declare const SERIES_ORDERING_TYPE_AUTOMATIC = 1;
declare const SERIES_ORDERING_TYPE_MANUAL = 2;
declare const MBID_REGEXP: RegExp;
declare const VARTIST_GID = "89ad4ac3-39f7-470e-963a-56509c546377";
declare const VARTIST_ID = 1;
declare const VARTIST_NAME = "Various Artists";
declare const NOLABEL_GID = "157afde4-4bf5-4039-8ad2-5a15acc85176";
declare const NOLABEL_ID = 3267;
declare const VIDEO_ATTRIBUTE_ID = 582;
declare const VIDEO_ATTRIBUTE_GID = "112054d5-e706-4dd8-99ea-09aabee36cd6";
declare const MAX_LENGTH_DIFFERENCE = 10500;
declare const MAX_RECENT_ENTITIES = 10;
declare const MIN_NAME_SIMILARITY = 0.75;
declare const ENTITIES_WITH_RELATIONSHIP_CREDITS = "WIP convertExpression: ObjectExpression";
declare const QUALITY_NAMES: Map<QualityT, "WIP convertTypeNode: FunctionTypeAnnotation">;
declare const FLUENCY_NAMES: {};
declare const LANGUAGE_ENG_ID = 120;
declare const LANGUAGE_MUL_ID = 284;
declare const LANGUAGE_ZXX_ID = 486;
declare const COUNTRY_JA_AREA_ID = 107;
declare const DISPLAY_NONE_STYLE = "WIP convertExpression: CallExpression";
declare const WS_EDIT_RESPONSE_OK: WS_EDIT_RESPONSE_OK_T;
declare const WS_EDIT_RESPONSE_NO_CHANGES: WS_EDIT_RESPONSE_NO_CHANGES_T;
declare const BRACKET_PAIRS = "WIP convertExpression: ArrayExpression";
export type EveryPropertyIsExistsOrNot<T> = T | {
	[K in keyof T]?: undefined | null;
};
export type RelationshipEditorBase = EveryPropertyIsExistsOrNot<{
	relationshipDialogDispatch: (action: DialogActionT) => void;
	relationshipDialogState: RelationshipDialogStateT;
}>;
export type ReleaseRelationshipEditor = RelationshipEditorBase & EveryPropertyIsExistsOrNot<{
	state: ReleaseRelationshipEditorStateT;
	dispatch: (action: ReleaseRelationshipEditorActionT) => void;
}>;
export type NonReleaseRelationshipEditor = RelationshipEditorBase & EveryPropertyIsExistsOrNot<{
	state: RelationshipEditorStateT;
	dispatch: (action: RelationshipEditorActionT) => void;
}>;
export type MaybeReleaseRelationshipEditor = ReleaseRelationshipEditor | NonReleaseRelationshipEditor;
declare global {
	var MB: undefined | {
		constants: typeof constants;
		relationshipEditor: MaybeReleaseRelationshipEditor;
		/**
		 * If you're on a relationship editor page, this should be available.
		 */
		tree?: typeof import("./weight-balanced-tree.js");
	};
}

declare namespace constants {
	export { AREA_TYPE_COUNTRY, ARTIST_GROUP_TYPES, ARTIST_TYPE_CHOIR, ARTIST_TYPE_GROUP, ARTIST_TYPE_ORCHESTRA, ARTIST_TYPE_PERSON, BRACKET_PAIRS, CONTACT_URL, COUNTRY_JA_AREA_ID, DARTIST_ID, DISPLAY_NONE_STYLE, DLABEL_ID, EMPTY_PARTIAL_DATE, ENTITIES_WITH_RELATIONSHIP_CREDITS, ENTITY_NAMES, FAVICON_CLASSES, FLUENCY_NAMES, INSTRUMENT_ROOT_ID, LANGUAGE_ENG_ID, LANGUAGE_MUL_ID, LANGUAGE_ZXX_ID, MAX_LENGTH_DIFFERENCE, MAX_RECENT_ENTITIES, MBID_REGEXP, MIN_NAME_SIMILARITY, NOLABEL_GID, NOLABEL_ID, PART_OF_SERIES_LINK_TYPES, PART_OF_SERIES_LINK_TYPE_GIDS, PART_OF_SERIES_LINK_TYPE_IDS, PROBABLY_CLASSICAL_LINK_TYPES, QUALITY_NAMES, RECORDING_OF_LINK_TYPE_GID, RECORDING_OF_LINK_TYPE_ID, RT_MIRROR, SERIES_ORDERING_ATTRIBUTE, SERIES_ORDERING_TYPE_AUTOMATIC, SERIES_ORDERING_TYPE_MANUAL, TASK_ATTRIBUTE_ID, TIME_ATTRIBUTE, VARTIST_GID, VARTIST_ID, VARTIST_NAME, VIDEO_ATTRIBUTE_GID, VIDEO_ATTRIBUTE_ID, VOCAL_ROOT_ID, WS_EDIT_RESPONSE_NO_CHANGES, WS_EDIT_RESPONSE_OK };
}

export {};
